/**
 * 模块化：
1. commonjs：require+module.exports  
    用于node环境
    运行时加载模块
    同步方式加载（因为在服务端，模块文件都存在本地磁盘，读取非常快，而在浏览器上，采用请求加载资源，所以异步加载的方案更合理）
2. AMD
    异步加载方式，模块的加载不影响后面代码的执行
    define定义模块，require加载模块
    依赖前置，提前执行  类似于var的变量提升
3. CMD
    异步加载方式，模块的加载不影响后面代码的执行
    define定义模块，require加载模块
    依赖就近，延迟执行
4. esModule
    import + export 
    export default 的时候 import 不需要 {}
    同步方式加载
    import 命令会被js引擎静态分析，在编译时就引入模块代码，而不是运行时加载，无法实现条件加载
 */

commonjs与esModule的区别
1. commonjs输出的是一个值的拷贝（修改输出的值，不会影响模块内部），es6模块化输出的是值的引用（修改输出的值，会影响模块内部），不会缓存值
2. commonjs是运行时加载，es6模块是编译时加载


模块化的作用：
1. 减少变量污染
2. 增强代码复用性
3. 增强代码可维护性
4. 控制依赖


AMD CMD都可以用于浏览器，因为是异步加载
ES6模块化 浏览器还没有完全兼容，需要通过babel工具转换成标准es5
